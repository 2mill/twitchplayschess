/**
 * This is a declaration file for the Twitch Extension Helper
 * based on the documentation found here:
 * https://dev.twitch.tv/docs/extensions/reference/#javascript-helper
 */
export as namespace Twitch;

/**
 * The global Twitch object.
 */
export type Instance = {
	/**
	 * Twitch Extension Helper Instance.
	 */
	readonly ext?: ExtensionHelper;
};

/**
 * Twitch Extension Helper.
 */
export interface ExtensionHelper {
	//#region Helper: Extensions
	//https://dev.twitch.tv/docs/extensions/reference/#helper-extensions

	/**
	 * This encodes the Helper version in 1.1.1 (semantic versioning) format.
	 */
	readonly version: string;

	/**
	 * This encodes the environment. For external users, this is always
	 * production.
	 */
	readonly environment: string;

	/**
	 * This callback is fired each time the JWT is refreshed.
	 *
	 * For example:
	 * ```
	 * window.Twitch.ext.onAuthorized(function(auth) {
	 * 	console.log('The JWT that will be passed to the EBS is', auth.token);
	 * 	console.log('The channel ID is', auth.channelId);
	 * });
	 * ```
	 * Usually, the JWT obtained from this call is passed as a header during
	 * AJAX calls to the EBS. For example:
	 * ```
	 * window.Twitch.ext.onAuthorized(function(auth) {
	 * 	$.ajax({
	 * 		url: '/<some backend path>',
	 * 		type: 'GET',
	 * 		headers: {
	 * 			'x-extension-jwt': auth.token,
	 * 		}
	 * 	});
	 * });
	 * ```
	 */
	onAuthorized(
		authCallback: (auth: {
			/**
			 * Channel ID of the page where the extension is iframe embedded.
			 */
			channelId: string;

			/**
			 * Client ID of the extension.
			 */
			clientId: string;

			/**
			 * JWT that should be passed to any EBS call for authentication.
			 */
			token: JWT;

			/**
			 * Opaque user ID.
			 */
			userId: string;
		}) => void
	): void;

	/**
	 * This callback is fired when the context of an extension is fired.
	 *
	 * @param contextCallback is a function with two arguments, a `context`
	 * object and an array of strings naming the `context` properties that were
	 * changed.
	 */
	onContext(
		contextCallback: (
			/**
			 * The context object.
			 */
			context: ExtensionContext,

			/**
			 * The context properties that were changed.
			 */
			changed: (keyof ExtensionContext)[]
		) => void
	): void;

	/**
	 * This callback is fired if any errors are generated by the extension
	 * helper.
	 *
	 * @param errorCallback is a function with one argument, the error value,
	 * when any errors occur within the helper.
	 */
	onError(errorCallback: (error: Error) => void): void;

	/**
	 * This function allows an extension to adjust its visibility when the
	 * viewer highlights the extension by hovering over the extension’s menu
	 * icon or open menu, in the video player. The function applies only to
	 * video-overlay and component Extensions.
	 *
	 * @param callback A callback that is called with one argument
	 */
	onHighlightChanged(
		callback: (
			/**
			 * A boolean indicating whether the extension is highlighted by the
			 * user.
			 */
			isHighlighted: boolean
		) => void
	): void;

	/**
	 * This function registers a callback that gets called whenever an extension
	 * changes position in the player. This applies only to video-component
	 * extensions. This also is triggered as the extension loads.
	 *
	 * @param callback A callback that is called with one argument
	 */
	onPositionChanged(
		callback: (
			/**
			 * An object indicating the x and y coordinates of the extension.
			 * These coordinates are expressed as fixed-point integers (two
			 * decimal points) representing the percentage of the player
			 * width/height where the top-left corner of the extension is
			 * located. For example, a value of 1050 for x indicates the corner
			 * of the extension is 10.5% of the player’s width from the left, on
			 * the x axis.
			 */
			position: { x: number; y: number }
		) => void
	): void;

	/**
	 * This function registers a callback that gets called whenever an extension
	 * is hidden/re-shown, either due to the viewer’s action or due to
	 * extensions hiding due to the video player changing to a state where
	 * extensions are not shown (such as when the video pauses or an ad is
	 * running). When an extension is not visible, it does not receive onContext
	 * updates and must perform only minimal work in the background.
	 *
	 * @param callback A callback that is called with one or two arguments
	 */
	onVisibilityChanged(
		callback: (
			/**
			 * A boolean indicating whether the extension is visible.
			 */
			isVisible: boolean,

			/**
			 * A fresh `context` object like the one passed by `onContext`.
			 * `context` is present only when `isVisible` is true.
			 */
			context?: ExtensionContext
		) => void
	): void;

	/**
	 * This function can be called by the front end to send directly to PubSub.
	 * It uses the Twitch-provided JWT for broadcasters, to allow broadcasters
	 * to send a broadcast (channel) or whisper message. Broadcasters cannot
	 * send to global.
	 *
	 * @param target Target topic. Usually this is `"broadcast"` (but it could
	 * be `"whisper-<userId>"`).
	 * @param contentType Content type of the serialized message; for example,
	 * `"application/json"`.
	 * @param message Either an object that will be automatically serialized as
	 * JSON or a string.
	 */
	send(
		target: string,
		contentType: string,
		message: Record<string, unknown> | string
	): void;

	/**
	 * This function binds the `callback` to listen to the target topic.
	 *
	 * @param target Target topic. Usually this is `"broadcast"` or `"global"`
	 * (but it could be `"whisper-<userId>"`).
	 *
	 * If an extension front end listens to "broadcast" on a channel, it will
	 * receive messages sent to the channel, for that extension/channel
	 * combination. If it listens to "global", it will see messages sent to
	 * global, for all channels with that extension installed.
	 *
	 * Non-Extensions PubSub topics also are supported.
	 *
	 * @param callback Function with three arguments: `target`, `contentType`,
	 * and `message`. These fields correspond to the values in the
	 * [send](https://dev.twitch.tv/docs/extensions/reference/#send) message,
	 * except the message is always a string.
	 *
	 * Whispers are a set of optional PubSub channels that extensions can use.
	 * Each copy of an extension can register for `"whisper-<userId>"` where
	 * `userId` comes from the `onAuthorized` message. Attempts to listen to
	 * another userId will be blocked. Once the extension is listening, the
	 * EBS or broadcaster can send an individualized message to the channel.
	 */
	listen(
		target: string,
		callback: (
			/**
			 * Target topic. Usually this is `"broadcast"` (but it could be
			 * `"whisper-<userId>"`).
			 */
			target: string,

			/**
			 * Content type of the serialized message; for example,
			 * `"application/json"`.
			 */
			contentType: string,

			/**
			 * message string.
			 */
			message: string
		) => void
	): void;

	/**
	 * This function unbinds the listen callback from the target.
	 *
	 * @param target Target topic. Often this is `"broadcast"` but it might be
	 * `"whisper-<userId>"`.
	 *
	 * Non-Extensions PubSub topics also are supported.
	 *
	 * @param callback Function with three arguments: `target`, `contentType`,
	 * and `message`. These fields correspond to the values in the
	 * [send](https://dev.twitch.tv/docs/extensions/reference/#send) message,
	 * except the message is always a string.
	 *
	 * This must be the original function object: passing in a new function or a
	 * copy of the original has no effect.
	 */
	unlisten(target: string, callback: () => void): void;

	//#endregion

	/**
	 * Extension Helper: Actions
	 * https://dev.twitch.tv/docs/extensions/reference/#helper-actions
	 */
	actions: {
		/**
		 * This function prompts users to follow the specified
		 * channel, with a dialog controlled by Twitch. When users confirm (through
		 * the dialog) that they want to follow the channel, the callback registered
		 * with `Twitch.ext.actions.onFollow` is invoked.
		 *
		 * @param channelName Channel to be followed.
		 */
		followChannel(channelName: string): void;

		/**
		 * This function causes your video-component or video-overlay extension to
		 * be minimized.
		 */
		minimize: () => void;

		/**
		 * This function registers a callback that is invoked whenever a user
		 * completes an interaction prompted by the `followChannel` action.
		 *
		 * @param callback Function with two arguments
		 */
		onFollow(
			callback: (
				/**
				 * A boolean that indicates whether users confirm that they want to
				 * follow the channel.
				 */
				didFollow: boolean,

				/**
				 * The channel that was followed.
				 */
				channelName: string
			) => void
		): void;

		/**
		 * This function opens a prompt for users to share their identity. After a
		 * successful identity link, the `Twitch.ext.onAuthorized` callback is
		 * invoked with the user’s ID. This function has no effect if:
		 * - Your extension does not have identity linking enabled.
		 * - It is called when the extension is installed on the user’s own channel.
		 */
		requestIdShare: () => void;
	};

	/**
	 * Extension Helper: Configuration
	 * https://dev.twitch.tv/docs/extensions/reference/#helper-actions
	 */
	configuration: {
		/**
		 * This property returns the record for the broadcaster segment if one is
		 * found; otherwise, undefined.
		 */
		readonly broadcaster?: {
			version: string;
			content: string;
		};

		/**
		 * This property returns the record for the developer segment if one is
		 * found; otherwise, undefined.
		 */
		readonly developer?: {
			version: string;
			content: string;
		};

		/**
		 * This property returns the record for the global segment if one is found;
		 * otherwise, undefined.
		 */
		readonly global?: {
			version: string;
			content: string;
		};

		/**
		 * This function registers a callback that is called whenever an extension
		 * configuration is received.
		 *
		 * @param callback The callback function takes no input and returns nothing.
		 * After this is called for the first time, the records for the global,
		 * developer and broadcaster segments will be set if the data is
		 * available.
		 */
		onChanged(callback: () => void): void;

		/**
		 * This function can be called by the front end to set an extension
		 * configuration. It uses the Twitch-provided JWT for broadcasters, to allow
		 * broadcasters to set a broadcaster configuration segment.
		 *
		 * @param segment The configuration segment to set. Valid value.
		 * `"broadcaster"`.
		 * @param version The version of configuration with which the segment is
		 * stored.
		 * @param content The string-encoded configuration.
		 */
		set(segment: string, version: string, content: string): void;
	};

	/**
	 * Extension Helper: Feature Flags
	 * https://dev.twitch.tv/docs/extensions/reference/#helper-feature-flags
	 */
	features: {
		/**
		 * If this flag is `true`, Bits in Extensions features will work in your
		 * extension on the current channel
		 *
		 * If this flag is `false`, disable or hide the Bits in Extensions
		 * features in your extension.
		 *
		 * This flag will be false if:
		 * - You did not enable Bits support in the Monetization tab in the
		 * Extensions manager.
		 * - The broadcaster is not eligible to receive Bits.
		 * - The broadcaster disabled Bits in Extensions features for your
		 * extension.
		 */
		readonly isBitsEnabled: boolean;

		/**
		 * If this flag is `true`, you can send a chat message to the current
		 * channel using [Send Extension Chat Message](https://dev.twitch.tv/docs/extensions/reference/#send-extension-chat-message)
		 * (subject to the authentication requirements documented for that
		 * endpoint).
		 * This flag may be false if:
		 * - You did not enable the “Chat Capabilities” option for your
		 * extension on the Twitch developer site.
		 * - The broadcaster disabled chat for your extension.
		 */
		readonly isChatEnabled: boolean;

		/**
		 * If this flag is `true`, your extension has the ability to get the
		 * subscription status of identity-linked viewers from both the helper
		 * in the `twitch.ext.viewer.subscriptionStatus` object and via the
		 * Twitch API.
		 *
		 * This flag may be false if:
		 * - You did not enable the “Subscription Status” option for your
		 * extension on the Twitch developer site.
		 * - The broadcaster did not grant your extension the permission to view
		 * their viewer’s subscriber status when they activated the extension,
		 * or they revoked that permission from the Manage Permissions page.
		 */
		readonly isSubscriptionStatusAvailable: boolean;

		/**
		 * This function enables you to receive real-time updates to changes of
		 * the `features` object. If this callback is invoked, you should
		 * re-check the `Twitch.ext.features` object for a change to any feature
		 * flag your extension cares about. The callback is called with an array
		 * of feature flags which were updated.
		 *
		 * @param callback is a function with one argument
		 */
		onChanged(
			callback: (
				/**
				 * The callback which will be called when feature flags are
				 * updated. Feature flags are received in your extension from
				 * Twitch asynchronously, after the first call to
				 * `onAuthorized`. If you care about only the initial state, you
				 * can get that in your `onAuthorized` callback. If you need to
				 * know about updates, use `Twitch.ext.features.onChanged`.
				 */
				changed: string[]
			) => void
		): void;
	};

	/**
	 * Extension Helper: Bits
	 * https://dev.twitch.tv/docs/extensions/reference/#helper-bits
	 *
	 * Some functions use the `Product` object. Here is an example (fields are
	 * described under `getProducts`):
	 * ```
	 * {
	 * 	"sku": "carrot",
	 * 	"displayName": "Carrot",
	 * 	"cost": {
	 * 		"amount": "500",
	 * 		"type": "bits"
	 * 	}
	 * 	"inDevelopment": true
	 * }
	 * ```
	 */
	bits: {
		/**
		 * This function returns a promise which resolves to an array of
		 * products available for Bits, for the extension, if the context
		 * supports Bits in Extensions actions. Otherwise, the promise rejects
		 * with an error; this can occur, for instance, if the extension is
		 * running in an older version of the developer rig or an older version
		 * of the mobile app (earlier than V6.4), which does not support Bits in
		 * Extensions actions.
		 *
		 * Products are returned only if the extension is configured for Bits
		 * (see the [Extensions Monetization Guide](https://dev.twitch.tv/docs/extensions/monetization)).
		 * The products that are returned depend on the state of both the
		 * extension version (whether it is released) and the product (whether
		 * the kit is in development):
		 * @see https://dev.twitch.tv/docs/extensions/reference/#helper-bits
		 */
		getProducts(): Promise<Product[]>;

		/**
		 * This function takes a callback that is fired whenever a transaction
		 * is cancelled. A transaction can be cancelled in several ways:
		 *
		 * - The user clicks the Cancel button.
		 * - The user closes the confirmation dialog by clicking outside it.
		 * - The `useBits` function fails and the user dismisses the error
		 * dialog that is displayed.
		 * @param callback
		 */
		onTransactionCancelled(callback: () => void): void;

		/**
		 * This function registers a callback that is fired whenever a Bits in
		 * Extensions transaction is completed.
		 * @param callback The callback receives a `TransactionObject`.
		 */
		onTransactionComplete(
			callback: (transaction: Transaction) => void
		): void;

		/**
		 * This function sets the state of the extension helper, so it does not
		 * call live services for usage of Bits. Instead, it does a local
		 * loopback to the completion handler, after a fixed delay to simulate
		 * user approval and process latency.
		 */
		setUseLoopback: boolean;

		/**
		 * Call this function when the viewer hovers over a product in your
		 * extension UI, to cause the Twitch UI to display a dialog showing the
		 * viewer’s Bits balance. The dialog displays for 1.5 seconds, unless
		 * your extension calls showBitsBalance again, in which case the
		 * 1.5-second timer resets.
		 *
		 * This is a “fire-and-forget” function: the extension developer does
		 * not need to tell Twitch when the viewer stops hovering over the
		 * product.
		 *
		 * On mobile, this function is ignored.
		 */
		showBitsBalance(): void;

		/**
		 * This function redeems a product with the specified SKU for the number
		 * of Bits specified in the catalog entry of that product. For more
		 * information, see [Exchanging Bits for a Product](https://dev.twitch.tv/docs/extensions/monetization/#exchanging-bits-for-a-product).
		 *
		 * @param sku product sku
		 */
		useBits(sku: string): void;
	};

	/**
	 * Extension Helper: Viewer
	 * https://dev.twitch.tv/docs/extensions/reference/#helper-viewer
	 *
	 * The Twitch.ext.viewer object is a collection of info about the twitch
	 * viewer that is watching the channel page where your extension is
	 * activated. It will only be populated if the viewer is logged in, and only
	 * after the `onAuthorized` callback has been called. Accessing its
	 * properties will otherwise return `null`.
	 *
	 * Much of the information stored here is also present in the extension JWT,
	 * and is presented as part of this object for convenience. It is passed to
	 * the extension iframe from the client without validation, so it is
	 * recommended that you use this info for rendering conditional UI elements,
	 * and that you pass the JWT to your EBS for validation if you are using any
	 * of this information to grant users permission to take privileged actions
	 * within your extension.
	 */
	viewer: {
		/**
		 * The opaque id of the viewer.
		 */
		readonly opaqueId: string | null;

		/**
		 * The Twitch ID of a linked viewer. `null` if the viewer has not opted
		 * to share their identity with the extension.
		 */
		readonly id: string | null;

		/**
		 * The role of the user. See the JWT schema for possible values.
		 */
		readonly role: string | null;

		/**
		 * Provided as a convenience to check whether or not a user has shared
		 * their identity with their extension.
		 */
		readonly isLinked: boolean | null;

		/**
		 * The encoded JWT. This is the same as the token property of the
		 * authData parameter that currently gets passed to the onAuthorized
		 * callback.
		 */
		readonly sessionToken: string | null;

		/**
		 * Subscription status will be an object containing information about
		 * the viewer’s subscription.
		 *
		 * The value of `subscriptionStatus` will be `null` if the user is
		 * either not a subscriber, or opting not to share their identity. The
		 * value will also be `null` if the extension otherwise doesn’t have
		 * subscription capabilities.
		 */
		readonly subscriptionStatus: SubscriptionStatus | null;

		/**
		 * This function binds a callback will be invoked when the viewer’s
		 * status changes (e.g. if a viewer subscribes and changes their
		 * subscription status).
		 * @param callback
		 */
		onChanged(callback: () => void): void;
	};
}

export type ExtensionContext = {
	/**
	 * If `true`, player controls are visible (e.g., due to mouseover). Do not
	 * use this for mobile extensions; it is not sent for mobile.
	 */
	arePlayerControlsVisible: boolean;

	/**
	 * Bitrate of the broadcast.
	 */
	bitrate: number;

	/**
	 * Buffer size of the broadcast.
	 */
	bufferSize: number;

	/**
	 * Display size of the player.
	 */
	displayResolution: string;

	/**
	 * Game being broadcast.
	 */
	game: string;

	/**
	 * Number of seconds of latency between the broadcaster and viewer.
	 */
	hlsLatencyBroadcaster: number;

	/**
	 * Information about the current channel’s hosting status, or `undefined` if
	 * the channel is not currently hosting.
	 *
	 * Host mode enables broadcasters to stream another channel’s live broadcast
	 * (audio, video, and Extensions), while the host broadcaster is offline or
	 * interacting only with chat.
	 */
	hostingInfo?: {
		/**
		 * Numeric ID of the channel being hosted by the currently visible
		 * channel.
		 */
		hostedChannelId: number | string;

		/**
		 * Numeric ID of the host channel.
		 */
		hostingChannelId: number | string;
	};

	/**
	 * If `true`, the viewer is watching in fullscreen mode. Do not use this for
	 * mobile extensions; it is not sent for mobile.
	 */
	isFullscreen: boolean;

	/**
	 * If `true`, the viewer has muted the stream.
	 */
	isMuted: boolean;

	/**
	 * If `true`, the viewer has paused the stream.
	 */
	isPaused: boolean;

	/**
	 * If `true`, the viewer is watching in theater mode. Do not use this for
	 * mobile extensions; it is not sent for mobile.
	 */
	isTheatreMode: boolean;

	/**
	 * Language of the broadcast (e.g., "en").
	 */
	language: string;

	/**
	 * Valid values:
	 * - `viewer` - The helper was loaded in a viewer context, such as the
	 * Twitch channel page.
	 * - `dashboard` - The helper was loaded into a broadcaster control context,
	 * like the live dashboard. Use this mode to present controls that allow the
	 * broadcaster to update the extension’s behavior during broadcast.
	 * - `config` - The helper was loaded into the extension dashboard for
	 * configuration, including initial configuration. All setup needed to run
	 * the extension should be in this mode.
	 */
	mode: 'viewer' | 'dashboard' | 'config';

	/**
	 * Indicates how the stream is being played. Valid values:
	 * - `video` - Normal video playback.
	 * - `audio` - Audio-only mode. Applies only to mobile apps.
	 * - `remote` - Using a remote display device (e.g., Chromecast). Video
	 * statistics may be incorrect or unavailable.
	 * - `chat-only` - No video or audio, chat only. Applies only to mobile
	 * apps. Video statistics may be incorrect or unavailable.
	 */
	playbackMode: 'video' | 'audio' | 'remote' | 'chat-only';

	/**
	 * The user's theme setting on the Twitch website. Valid values: `"light"`
	 * or `"dark"`.
	 */
	theme: 'light' | 'dark';

	/**
	 * Resolution of the broadcast.
	 */
	videoResolution: string;

	/**
	 * Currently selected player volume. Valid values: between 0 and 1.
	 */
	volume: number;
};

/**
 * JWT Schema
 *
 * https://dev.twitch.tv/docs/extensions/reference/#jwt-schema
 *
 * Example JWT Payload
 * ```
 * {
 * 	"exp": 1484242525,
 * 	"opaque_user_id": "UG12X345T6J78",
 * 	"channel_id": "test_channel",
 * 	"role": "broadcaster",
 * 	"is_unlinked": "false",
 * 	"pubsub_perms": {
 * 		"listen": [ "broadcast", "whisper-UG12X345T6J78" ],
 * 		"send": ["broadcast","whisper-*"]
 * 	}
 * }
 * ```
 */
export type JWT = {
	/**
	 * Numeric ID of the channel from which your front-end is being served.
	 */
	channel_id: string;

	/**
	 * Expiration time for the JWT, expressed as seconds since Jan 1, 1970.
	 * (For a definition of NumericDate, see
	 * [Terminology](https://tools.ietf.org/html/rfc7519#section-2) in the JWT
	 * RFC.)
	 */
	exp: number;

	/**
	 * `true` when the token is for a user that previously shared identity;
	 * otherwise, `false`.
	 */
	is_unlinked: boolean;

	/**
	 * Identifies the session using this JWT. Any token generated by your EBS
	 * should leave this field blank. When present, the value is interpreted as
	 * follows:
	 *
	 * - Values beginning with "U" are stable references to a Twitch account
	 *   across sessions and channels. You can use them to provide persistent
	 *   services to users.
	 *
	 * - Values beginning with "A" are transient references to an anonymous
	 *   Twitch session; the user has not logged into the Twitch website. These
	 *   values are not stable and should never be associated with persistent
	 *   data. It is possible for them to represent different users over time.
	 *   If your extension requires a stable user identity, your front-end
	 *   interface should display an appropriate login request when this field
	 *   does not begin with "U."
	 *
	 * Broadcasters’ tokens are set with "U" + their Twitch user IDs, to avoid
	 * confusing opaque IDs with user IDs when the broadcaster is a viewer.
	 */
	opaque_user_id: string;

	/**
	 * Defines the ability of the token holder to send and listen to messages
	 * for your extension.
	 *
	 * `pubsub_perms` contains two arrays: `listen` and `send`,
	 * which contain the topics the associated user is allowed to listen to and
	 * publish to, respectively.
	 *
	 * A wildcard/asterisk means the associated user can listen/publish to all
	 * topics associated with that extension/channel combination. A list of
	 * specific values means only the specified targets are allowed. If a
	 * permission is absent, it is equivalent to the empty listing: there are no
	 * default allowed targets. When sending messages from the EBS, specify an
	 * asterisk as the send permission, to allow the message to pass through the
	 * system.
	 *
	 * For an example, see
	 * [Example JWT Payload](https://dev.twitch.tv/docs/extensions/reference/#jwt-schema).
	 */
	pubsub_perms: {
		listen: string[];
		send: string[];
	};

	/**
	 * Type of user for whom this JWT has been signed. This is required. Valid
	 * values:
	 * - `broadcaster` - The owner of the channel, who should have configuration
	 *   rights.
	 * - `moderator` - A viewer who has moderation rights on the channel. This
	 *   is provided only for users who allow your extension to identify them.
	 * - `viewer` - A user watching the channel.
	 * - `external` - The token is not from a Twitch token generator. Your EBS
	 *   should use this value to generate tokens when it broadcasts messages.
	 *   Multiple endpoints require this role.
	 */
	role: 'broadcaster' | 'moderator' | 'viewer' | 'external';

	/**
	 * The user’s Twitch user ID. This is provided only for users who allow your
	 * extension to identify them. There are no guarantees this will be
	 * available, as users can revoke an extension's ability to identify them at
	 * any time. Users who revoke an extension's ability to identify them are
	 * issued a new opaque identifier.
	 */
	user_id: string;
};

/**
 * Twitch Product object.
 */
export type Product = {
	/**
	 * Cost object.
	 */
	cost: Cost;

	/**
	 * Registered display name for the SKU.
	 */
	displayName: string;

	/**
	 * This field is returned only for extension versions that are not in the
	 * `Released` state. Valid values:
	 * - `true` – Indicates that the product’s catalog entry specifies it is in
	 * development. If the developer tests the use of Bits, the Bits are not
	 * deducted from the user’s balance.
	 * - `false` – Indicates that the product’s catalog entry specifies it is
	 * not in development. If the developer tests the use of Bits, the Bits are
	 * deducted from the user’s balance.
	 * - `undefined` – Indicates that the product’s catalog entry does not
	 * specify anything about whether it is in development. If the developer
	 * tests the use of Bits, the Bits are deducted from the user’s balance.
	 */
	inDevelopment?: boolean;

	/**
	 * Unique ID for the product.
	 */
	sku: string;
};

/**
 * Twitch Cost object.
 */
export type Cost = {
	/**
	 * Number of Bits required for the product.
	 */
	amount: string | number;

	/**
	 * Always the string `"bits"`. Reserved for future use.
	 */
	type: 'bits';
};

/**
 * Twitch Transaction object.
 */
export type Transaction = {
	/**
	 * Display name of the user who executed the Bits in Extensions transaction
	 * (i.e., exchanged Bits to “purchase” a Bits in Extensions “product”).
	 */
	displayName: string;

	/**
	 * Valid values:
	 * - `CURRENT_USER` (the user who executed, or initiated, the transaction).
	 * - `OTHER` (a user other than `CURRENT_USER`).
	 *
	 * The `OTHER` value indicates when this message is being sent to a user
	 * other than the one who executed the transaction. For example, suppose
	 * user A exchanges 10 Bits to set off a firework on a channel. Twitch
	 * processes the transaction, then sends a message to all instances of the
	 * extension:
	 *
	 * - On user A's machine, the extension gets an `initiator` value of
	 * `CURRENT_USER`.
	 * - On the machines of all other users who have the extension, the
	 * `initiator` value is `OTHER`.
	 *
	 * In this way, the extension can easily display the firework in the
	 * browsers of all users who have the extension.
	 */
	initiator: TransactionInitiator;

	/**
	 * If set to `true`, will contain "inDevelopment". Otherwise it return blank.
	 */
	product: Product;

	/**
	 * ID of the transaction.
	 */
	transactionId: string;

	/**
	 * JWT containing the following transaction information in the payload. The
	 * JWT is a large, base64-encoded string. It can be verified using your
	 * developer secret. (See https://jwt.io/ for details on JWTs and
	 * verification.)
	 */
	transactionReceipt: string;

	/**
	 * Twitch ID of the user who executed the transaction.
	 */
	userId: string;
};

/**
 * Twitch Transaction Initiator
 */
enum TransactionInitiator {
	/**
	 * The user who executed, or initiated, the transaction.
	 */
	CURRENT_USER = 'current_user',

	/**
	 * A user other than `CURRENT_USER`.
	 */
	OTHER = 'other',
}

/**
 * Twitch Subscription Status object.
 */
export type SubscriptionStatus = {
	/**
	 * The subscription tier.
	 */
	tier: '1000' | '2000' | '3000';
};
